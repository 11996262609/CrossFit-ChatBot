// topo do arquivo (depois dos require)
const { Client, LocalAuth, List } = require('whatsapp-web.js');

// cria o cliente com sess√£o em volume e Chromium do container
const client = new Client({
  authStrategy: new LocalAuth({ dataPath: './.wwebjs_auth' }), // <- persiste no volume /app/.wwebjs_auth
  puppeteer: {
    headless: true,
    executablePath: process.env.PUPPETEER_EXECUTABLE_PATH || '/usr/bin/chromium',
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-gpu',
      '--no-zygote',
      '--single-process'
    ],
    timeout: 90000
  }
});

// eventos √∫teis
client.on('qr', (qr) => {
  const qrcode = require('qrcode-terminal');
  qrcode.generate(qr, { small: true });
});
client.on('ready', () => console.log('Tudo certo! WhatsApp conectado (Madala CF).'));

// inicializa
client.initialize();

// Utils
const delay = (ms) => new Promise((res) => setTimeout(res, ms));
const typing = async (chat, ms = 1200) => { await chat.sendStateTyping(); await delay(ms); };

// Texto do menu principal
const menuText = (nome = '') => 
`Ol√° ${nome ? nome.split(' ')[0] : ''}! üëã\n

Bem vinda a fam√≠lia *Madala CF*üí™ Com 10 anos de mercado, somos profissionais no compromisso que assumimos com voc√™!
Sua sa√∫de e bem estar √© a nossa prioridade.\n

Escolha uma op√ß√£o para descobri mais sobre a *Madala CF* (envie o n√∫mero):

1 - üèãÔ∏è Como funcionam as aulas de CrossFit
2 - ü•ã Aulas de judo com Sensei Jeferson todos os dias.
3 - üåê Redes sociais Madala CF
4 - üèÜ Eentos Madala CF
0 - ‚òé Falar com Tch√™ (gerente geral)
`;

function menu_r√°pido(nome = '') {
  return ` ${nome ? nome.split(' ')[0] : ''}! üëã

Escolha uma op√ß√£o para descobrir mais sobre a *Madala CF* (envie o n√∫mero):

1 - üèãÔ∏è Como funcionam as aulas de CrossFit
2 - ü•ã Aulas de jud√¥ com Sensei Jeferson todos os dias.
3 - üåê Redes sociais Madala CF
4 - üèÜ Eventos Madala CF
0 - ‚òé Falar com Tch√™ (gerente geral)`;
}

function op√ß√£o(nome = '') {
  return ` ${nome ? nome.split(' ')[0] : ''}! üëã

Mais - üìä Para mais informa√ß√µes sobre planos e valores
Volta - üîô Voltar ao menu inicial
Atendente - ‚òé Falar com um atendente`;
}

function marcar(nome = '') {
  return ` ${nome ? nome.split(' ')[0] : ''}! üëã

Marcar - üìä Para agendar uma aula esperimental
Menu - üîô Voltar ao menu inicial
Gerente - ‚òé Falar com um atendente`;
}

function planos_valores(nome = '') {
    return `Aqui ${nome ? nome.split(' ')[0] : ''}! üëã\n

      *PLANOS E VALORES*
    Planos do CrossFit (premium):\n
   üí∞ Trimestral: R$ 510/m√™s\n
   üí∞ Semestral: R$ 440/m√™s\n
   üí∞ Anual: R$ 360/m√™s\n\n

Pagamento: Cart√£o cr√©dito/D√©bito, PIX.\n`;
}


function cfPosMenu(nome='') {
  const first = nome ? nome.split(' ')[0] : '';
  return `${first ? first + ', ' : ''}escolha uma op√ß√£o (digite a palavra):

‚Ä¢ *Mais*  ‚Üí üìä Planos e valores
‚Ä¢ *Marcar* ‚Üí üóìÔ∏è Agendar aula experimental
‚Ä¢ *Menu*  ‚Üí üîô Voltar ao menu inicial
‚Ä¢ *Sair*  ‚Üí ‚ùå Encerrar`;
}


// Respostas
const RESPOSTAS = {
  comoFunciona: 
`*COMO FUNCIONA O CROSSFIT?*
‚Ä¢ Treinos em grupo com coach supervisionando (todos os n√≠veis).
‚Ä¢ Aula com aquecimento, t√©cnica.
‚Ä¢ Escalas: Iniciante, Intermedi√°rio e Avan√ßado.
‚Ä¢ Avalia√ß√£o inicial para ajustar cargas e movimentos.
‚Ä¢ Abrimos de Seg a S√°b. das 6h √†s 21h.

Localiza√ß√£o: https://maps.app.goo.gl/nyDBAPzNLLBHYWMJ9\n'+

Bora fazer uma aula teste? üí™

‚úÖAgente sua aula experimental:
https://calendar.app.google/9r6mFZTPwUivm4x89`
    + '\n\n' +
'',

  planos:
`*PLANOS E VALORES*
Planos do CrossFit (premium):\n
üí∞ Trimestral: R$ 510/m√™s\n
üí∞ Semestral: R$ 440/m√™s\n
üí∞ Anual: R$ 360/m√™s\n\n

Pagamento: Cart√£o, PIX, boleto.\n

‚úÖAgente sua aula experimental:
https://calendar.app.google/9r6mFZTPwUivm4x89`,


  Modalidade_judo:
`Jud√¥ ü•ã todos os dias √†s 21h (1h). Instrutor: *Sensei Jeferson* ` +
`Mensalidade: R$ 150,00, ` +
'Quer agendar uma aula experimental?\n' +
'Acesse o link de agendamento: https://calendar.google.com/calendar/u/0/r/month/2025/9/24' +

'1 Voltar ao menu principal\n' +
'2 Estrutura da academia Crossfit Madala CF\n' +
'4 Fala diretamente com instrutor de Jud√¥\n' +``,

  Eventos_madalacf:
`*PROMO√á√ïES ATIVAS* (exemplo ‚Äî ajuste)
Acesse nosso calend√°rio de eventos e fique por dentro de tudo o que rola na Madala CF:\n +
` +
`https://calendar.google.com/calendar/u/0/r/month/2024/6/1`,

  atendente:
`Este √© o contato do Tch√™. üë©‚Äçüíª
Seu genrente geral, pronto para te ajudar com qualquer d√∫vida ou suporte que precisar.\n +

Contato Madala CF - Tch√™
https://wa.me/qr/LI5TG3DW5XAZF1 

Envie um minuto para retorno.`,

Redes_sociais:
`*REDES SOCIAIS MADALA CF* üì±\n
Siga a gente nas redes sociais e fique por dentro de todas as novidades, dicas de treino e muito mais!\n
üì∏Instagram: https://www.instagram.com/madalacf/\n
üëçFacebook: https://www.facebook.com/madalacf\n
‚ñ∂Ô∏è YouTube: https://www.youtube.com/@madalacf\n
üåê Site: https://madalacf.com.br\n`,


};

// Helper para enviar o MENU com bot√µes
// ===================== HELPERS / ESTADO =====================
const estado = {}; // { [chatId]: 'MAIN' | 'CF_MENU' }



const firstName = v => (v ? String(v).trim().split(/\s+/)[0] : '');

// Card p√≥s-Menu do CrossFit (texto-livre: Mais/Marcar/Menu/Sair)
function cfPosMenu(nome='') {
  const n = firstName(nome);
  return `${n ? n + ', ' : ''}escolha uma op√ß√£o (digite a palavra):
‚Ä¢ *Mais*   ‚Üí üìä Planos e valores
‚Ä¢ *Marcar* ‚Üí üóìÔ∏è Agendar aula experimental
‚Ä¢ *Menu*   ‚Üí üîô Voltar ao menu inicial
‚Ä¢ *Sair*   ‚Üí ‚ùå Encerrar`;
}


// ===================== MENU (LIST) ATUALIZADO =====================
// Envia APENAS o List (sem duplicar com texto separado)
async function enviarMenu(msg, chat, nome) {
  const first = v => (v ? String(v).trim().split(/\s+/)[0] : '');

  const textoFallback = `Ol√° ${first(nome)}! üëã

Bem-vinda √† fam√≠lia *Madala CF* üí™
Escolha uma op√ß√£o (responda com o n√∫mero):
1 - üèãÔ∏è Como funcionam as aulas de CrossFit
2 - ü•ã Aulas de jud√¥ com Sensei Jeferson todos os dias.
3 - üåê Redes sociais Madala CF
4 - üèÜ Eventos Madala CF
0 - ‚òé Falar com Tch√™ (gerente geral)`;

  await typing(chat);
  // 1) Sempre envia o fallback (garante funcionamento no Web/Desktop)
  await client.sendMessage(msg.from, textoFallback);

  // 2) Tenta enviar o List (aparece bem no celular)
  try {
    const body = `Toque em "Ver op√ß√µes" no celular para abrir a lista.`;
    const sections = [{
      title: 'Menu principal',
      rows: [
        { id: '1', title: '1 - üèãÔ∏è Como funcionam as aulas de CrossFit' },
        { id: '2', title: '2 - ü•ã Aulas de jud√¥ com Sensei Jeferson todos os dias.' },
        { id: '3', title: '3 - üåê Redes sociais Madala CF' },
        { id: '4', title: '4 - üèÜ Eventos Madala CF' },
        { id: '0', title: '0 - ‚òé Falar com Tch√™ (gerente geral)' },
      ],
    }];
    const list = new List(body, 'Ver op√ß√µes', sections, 'Madala CF', 'Se preferir, digite o n√∫mero.');
    await client.sendMessage(msg.from, list);
  } catch (e) {
    // Se o List n√£o renderizar no dispositivo (ex.: Web), ignore:
    console.warn('List n√£o enviado (usando s√≥ fallback).', e?.message || e);
  }
}
// ===================== ROUTER PRINCIPAL (UM √öNICO LISTENER) =====================
client.on('message', async (msg) => {
  try {
    // Ignora grupos/status
    if (!msg.from.endsWith('@c.us')) return;

    const chat    = await msg.getChat();
    const contact = await msg.getContact();
    const nome    = contact.pushname || contact.name || contact.shortName || contact.number || '';
    const chatId  = msg.from;

    // Normaliza√ß√£o
    const rawText   = (msg.body || '').toString().trim();
    const lowerText = rawText.toLowerCase();
    let   asciiText = lowerText.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

    // Se a mensagem for resposta de List, use o id da linha para rotear (fica '1','2','3','4','0')
    if (msg.type === 'list_response' && msg.selectedRowId) {
      asciiText = String(msg.selectedRowId).trim().toLowerCase();
    }

    // Gatilho de sauda√ß√£o/menu ‚Üí abre o menu inicial (List)
    const ehSaudacao = /(menu|dia|tarde|noite|oi|ola|ol√°|oie|hey|eai)/i.test(asciiText);
    if (ehSaudacao) {
      estado[chatId] = 'MAIN';          // reseta estado
      await enviarMenu(msg, chat, nome);
      return;
    }

    // Estado atual
    const st = estado[chatId] || 'MAIN';

    // ==================== MAIN (menu principal) ====================
    if (st === 'MAIN') {
      // 1) CrossFit ‚Üí envia "Como funciona" e o p√≥s-menu CF
      if (asciiText === '1' || lowerText.startsWith('1 - üèãÔ∏è')) {
        await typing(chat);
        await client.sendMessage(chatId, RESPOSTAS.comoFunciona); // seu card "como funciona"
        await client.sendMessage(chatId, cfPosMenu(nome));        // p√≥s-menu CF (Mais/Marcar/Menu/Sair)
        estado[chatId] = 'CF_MENU';
        return;
      }

      // 2) Jud√¥
      if (asciiText === '2' || lowerText.startsWith('2 - ü•ã')) {
        await typing(chat);
        await client.sendMessage(chatId, RESPOSTAS.Modalidade_judo);
        await enviarMenu(msg, chat, nome); // reabre o menu principal ap√≥s card
        return;
      }

      // 3) Redes sociais
      if (asciiText === '3' || lowerText.startsWith('3 - üåê')) {
        await typing(chat);
        await client.sendMessage(chatId, RESPOSTAS.Redes_sociais);
        await enviarMenu(msg, chat, nome);
        return;
      }

      // 4) Eventos
      if (asciiText === '4' || lowerText.startsWith('4 - üèÜ')) {
        await typing(chat);
        await client.sendMessage(chatId, RESPOSTAS.Eventos_madalacf);
        await enviarMenu(msg, chat, nome);
        return;
      }

      // 0) Atendente
      if (asciiText === '0' || lowerText.startsWith('0 - ‚òé')) {
        await typing(chat);
        await client.sendMessage(chatId, RESPOSTAS.atendente);
        await enviarMenu(msg, chat, nome);
        return;
      }

      // Fallback no MAIN
      await typing(chat);
      await client.sendMessage(chatId, 'N√£o entendi. Toque em "Ver op√ß√µes" ou digite *menu* para abrir o menu.');
      await enviarMenu(msg, chat, nome);
      return;
    }

    // ==================== CF_MENU (p√≥s-menu do CrossFit) ====================
    if (st === 'CF_MENU') {
      // "mais" ‚Üí planos
      if (asciiText === 'mais' || asciiText === 'planos' || asciiText === 'valores' || asciiText === 'precos' || asciiText === 'pre√ßos' || asciiText === 'Mais' || asciiText === 'Planos' || asciiText === 'Valores' || asciiText === 'Precos' || asciiText === 'Pre√ßos') {
        await typing(chat);
        await client.sendMessage(chatId, RESPOSTAS.planos); // ou planos_valores(nome)
        await client.sendMessage(chatId, cfPosMenu(nome));  // permanece no CF_MENU
        return;
      }

      // "marcar" ‚Üí link de agendamento (defina RESPOSTAS.agendarCrossfit)
      if (asciiText === 'marcar' || asciiText === 'agendar' || asciiText === 'agendamento' || asciiText === 'Marcar' || asciiText === 'Agendar' || asciiText === 'Agendamento') {
        await typing(chat);
        await client.sendMessage(chatId, RESPOSTAS.agendarCrossfit);
        await client.sendMessage(chatId,comoFunciona(nome));
        return;
      }

      // "menu"/"inicio" ‚Üí volta ao menu inicial
      if (['menu','inicio','in√≠cio'].includes(asciiText)) {
        estado[chatId] = 'MAIN';
        await enviarMenu(msg, chat, nome);
        return;
      }

      // "sair" ‚Üí encerra (reseta estado)
      if (asciiText === 'sair') {
        await client.sendMessage(chatId, 'At√© logo! üëã');
        estado[chatId] = 'MAIN';
        return;
      }

      // Inv√°lido no CF_MENU ‚Üí reexibe instru√ß√µes
      await client.sendMessage(chatId, cfPosMenu(nome));
      return;
    }

  } catch (err) {
    console.error('Erro no processamento da mensagem:', err);
  }
});


// Servidor simples para manter o bot ativo (√∫til em plataformas como Heroku)
// health-check server
const express = require('express');
const app = express();
app.get('/', (_req, res) => res.send('ü§ñ Chatbot online!'));
app.listen(3000, () => console.log('Health-check na porta 3000'));
module.exports = app;

process.on('unhandledRejection', (e) => console.error('UnhandledRejection:', e));
process.on('uncaughtException', (e) => console.error('UncaughtException:', e));